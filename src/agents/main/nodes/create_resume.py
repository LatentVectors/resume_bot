from __future__ import annotations

from src.logging_config import logger

from ..state import Experience, InternalState, PartialInternalState


def create_resume(state: InternalState) -> PartialInternalState:
    """
    Create Resume

    This node combines all generated resume content (professional summary, enhanced experiences, and skills) into a well-formatted resume string. It serves as the final step in the resume generation process, taking the structured data from previous nodes and formatting it into a professional, readable resume document.

    The node validates that all required content has been generated by previous nodes, then uses the format_resume function to create a properly structured resume with appropriate sections, formatting, and styling.

    Implementation Requirements:
    - Validate that all required inputs (professional_summary, experiences, skills) are present and non-empty
    - Call format_resume function with appropriate parameters to generate the formatted resume
    - Return only the resume field in PartialInternalState
    - Handle missing or invalid data gracefully with appropriate error messages
    - Log node execution for debugging
    - Ensure the resume follows standard professional formatting conventions

    Reads:
    - professional_summary: str - Generated professional summary from generate_summary node
    - experiences: list[Experience] - Enhanced experience objects with bullet points from generate_experience node
    - skills: list[str] - Generated skills list from generate_skills node

    Returns:
    - resume: str - Complete formatted resume as a string
    """
    logger.debug("NODE: create_resume")

    # Validate required inputs
    if not state.professional_summary:
        raise ValueError("professional_summary is required for resume creation")
    if not state.experiences:
        raise ValueError("experiences list cannot be empty for resume creation")
    if not state.skills:
        raise ValueError("skills list cannot be empty for resume creation")

    # Generate formatted resume
    resume = format_resume(
        professional_summary=state.professional_summary, experiences=state.experiences, skills=state.skills
    )

    return PartialInternalState(resume=resume)


def format_resume(professional_summary: str, experiences: list[Experience], skills: list[str]) -> str:
    """Format the resume content into a professional resume string.

    Args:
        professional_summary: The professional summary text
        experiences: List of experience objects with bullet points
        skills: List of skills

    Returns:
        Formatted resume as a string
    """
    # Header section
    resume_lines = [
        "PROFESSIONAL SUMMARY",
        "=" * 50,
        professional_summary,
        "",
    ]

    # Skills section
    resume_lines.extend(
        [
            "SKILLS",
            "=" * 50,
            ", ".join(skills),
            "",
        ]
    )

    # Experience section
    resume_lines.extend(
        [
            "PROFESSIONAL EXPERIENCE",
            "=" * 50,
        ]
    )

    for exp in experiences:
        # Format dates
        start_date_str = exp.start_date.strftime("%B %Y")
        end_date_str = exp.end_date.strftime("%B %Y") if exp.end_date else "Present"
        date_range = f"{start_date_str} - {end_date_str}"

        # Add experience header
        resume_lines.extend(
            [
                f"{exp.title}",
                f"{exp.company} | {date_range}",
                "",
            ]
        )

        # Add bullet points
        if exp.points:
            for point in exp.points:
                resume_lines.append(f"â€¢ {point}")
        else:
            # Fallback to content if no bullet points
            resume_lines.append(f"  {exp.content}")

        resume_lines.append("")

    return "\n".join(resume_lines)
